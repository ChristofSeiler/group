BiocManager::install()
library("EBImage")
? display
source("~/.active-rstudio-document", echo=TRUE)
im
hist(im)
im
display(im)
display(cells)
toRGB(getFrame(cells, 1))
EBImage::combine(   ## using `::` here since `combine` and `tile` are also defined in other packages (e.g., dplyr)
toRGB(getFrame(cells, 1)),
toRGB(getFrame(cells, 2)),
toRGB(getFrame(cells, 3)),
rgbImage(red   = getFrame(cells, 3),
green = getFrame(cells, 2),
blue  = getFrame(cells, 1))
)
EBImage::tile(EBImage::combine(   ## using `::` here since `combine` and `tile` are also defined in other packages (e.g., dplyr)
toRGB(getFrame(cells, 1)),
toRGB(getFrame(cells, 2)),
toRGB(getFrame(cells, 3)),
rgbImage(red   = getFrame(cells, 3),
green = getFrame(cells, 2),
blue  = getFrame(cells, 1))), nx = 4, lwd = 5, fg.col = "white")
? tile
tile
EBImage::combine(   ## using `::` here since `combine` and `tile` are also defined in other packages (e.g., dplyr)
toRGB(getFrame(cells, 1)),
toRGB(getFrame(cells, 2)),
toRGB(getFrame(cells, 3)),
rgbImage(red   = getFrame(cells, 3),
green = getFrame(cells, 2),
blue  = getFrame(cells, 1))) -> h
display(h)
h
hist(h[,,,1])
hist(h[,,,2])
hist(h[,,,3])
EBImage::tile(EBImage::combine(   ## using `::` here since `combine` and `tile` are also defined in other packages (e.g., dplyr)
toRGB(getFrame(cells, 1)),
toRGB(getFrame(cells, 2)),
toRGB(getFrame(cells, 3)),
rgbImage(red   = getFrame(cells, 3),
green = getFrame(cells, 2),
blue  = getFrame(cells, 1))), nx = 4, lwd = 5, fg.col = "white")
display(im, method = "raster")
display(normalize(im), method = "raster")
writeImage(im, files = "test.png")
dir()
source("~/.active-rstudio-document", echo=TRUE)
im
hist(getFrame(cells, 1))
im = EBImage::tile(EBImage::combine(   ## using `::` here since `combine` and `tile` are also defined in other packages (e.g., dplyr)
toRGB(normalize(getFrame(cells, 1))),
toRGB(normalize(getFrame(cells, 2))),
toRGB(normalize(getFrame(cells, 3))),
rgbImage(red   = getFrame(cells, 3),
green = getFrame(cells, 2),
blue  = getFrame(cells, 1))), nx = 4, lwd = 5, fg.col = "white")
display(im, method = "raster")
library(rworldmap)
vignette('rworldmap')
4000^2*8/2^20
?? headers
BiocManager::install(version = "release")
BiocManager::install()
BiocManager::install(version = "3.16")
BiocManager::install()
devtools::install_github("const-ae/lemur")
devtools::install_github("const-ae/lemur", dependencies = true)
BiocManager::install("glmGamPoi")
devtools::install_github("const-ae/lemur", dependencies = true)
devtools::install_github("const-ae/lemur")
devtools::install_github("const-ae/lemur", build_vignettes = TRUE)
devtools::install_github("const-ae/lemur", build_vignettes = TRUE, force=TRUE)
x = readImage(system.file("images", "sample-color.png", package="EBImage"))[257:768,,]
library(EBImage)
x = readImage(system.file("images", "sample-color.png", package="EBImage"))[257:768,,]
display(x)
display
displayWidget
EBImage::displayWidget
EBImage:::displayWidget
? pca
?? pca
princomp
princomp.matrix
stats::princomp.matrix
stats:::princomp.matrix
stats:::princomp.default
eigen
install.packages("WLasso")
install.packages("WLogit")
install.packages("PPLasso")
openVignettes("PPLasso")
openVignette("PPLasso")
repos = c("@CRAN@",
paste("https://bioconductor.org/packages",
c("devel/bioc", "release/data/experiment", "release/data/annotation", "release/bioc"), sep = "/"))
update.packages(repos = repos, ask = FALSE)
BiocManager::install(update = TRUE, ask = FALSE, version = 'devel')
repos = c("@CRAN@",
paste("https://bioconductor.org/packages",
c("devel/bioc", "release/data/experiment", "release/data/annotation", "release/bioc"), sep = "/"))
update.packages(repos = repos, ask = FALSE)
BiocManager::install(update = TRUE, ask = FALSE, version = 'devel')
setwd("~/svnco/Huber-group-EMBL.github.io/posts")
install.packages("gridExtra")
install.packages("reshape2")
install.packages("ggfortify")
install.packages("rtsne")
install.packages("Rtsne")
install.packages("umap")
install.packages("multivariance")
install.packages("pals")
repos = c("@CRAN@",
paste("https://bioconductor.org/packages",
c("devel/bioc", "release/data/experiment", "release/data/annotation", "release/bioc"), sep = "/"))
install.packages("EBImage", repos = repos)
install.packages("tiff", repos = repos)
install.packages("tiff", configure.vars = "PATH=$PATH:/opt/homebrew/bin")
